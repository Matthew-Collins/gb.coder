' Gambas class file

Public RootFolder As String
Public ProjectFiles As New ProjectFile[]
Public TargetFile As String
Public Type As Integer

Public Debugger As DebuggerLLDB
Public DebuggerObserver As Observer

Event DisplayLineOfText(Value As String)
Event ShowFile(ProjectFile As ProjectFile)

Event CodeCompletionPopup(TextEditor As CodeEditor)
Event CodeCompletionPulldown(InsertFirst As Boolean)
Event CodeCompletionNavigate(Down As Integer)

Public Sub _new()

  Dim ProjectFile As ProjectFile

  ' Dim ProjectFile As New ProjectFile(Me, "Program.vb", ProjectTypes.Vb)
  '
  ' Me.RootFolder = User.Home &/ "Documents/Core/MyFirstApp"
  ' Me.ProjectFiles.Add(ProjectFile)
  ' Me.TargetFile = "bin/Debug/netcoreapp2.0/ubuntu.16.04-x64/MyFirstApp"
  ' Me.Type = ProjectTypes.VbCore

  ' Me.Type = ProjectTypes.SwiftScript
  ' Me.RootFolder = User.Home &/ "Documents/Swift/MyFirstApp"
  ' Me.TargetFile = "main"
  ' ProjectFile = New ProjectFile(Me, "", "main.swift", ProjectTypes.Swift)
  ' Me.ProjectFiles.Add(ProjectFile)
  ' ProjectFile = New ProjectFile(Me, "", "my.swift", ProjectTypes.Swift)
  ' Me.ProjectFiles.Add(ProjectFile)

  Me.Type = ProjectTypes.SwiftPackage
  Me.RootFolder = User.Home &/ "Documents/Swift/MyFirstPackage"
  Me.TargetFile = ".build/debug/MyFirstPackage"
  ProjectFile = New ProjectFile(Me, "Sources/MyFirstPackage", "main.swift", ProjectTypes.Swift)
  Me.ProjectFiles.Add(ProjectFile)
  ProjectFile = New ProjectFile(Me, "Sources/MyFirstPackage", "my.swift", ProjectTypes.Swift)
  Me.ProjectFiles.Add(ProjectFile)
  ProjectFile = New ProjectFile(Me, "", "Package.swift", ProjectTypes.SwiftPackage)
  Me.ProjectFiles.Add(ProjectFile)
  ProjectFile = New ProjectFile(Me, "", "README.md", ProjectTypes.MarkDown)
  Me.ProjectFiles.Add(ProjectFile)

  ' Dim ProjectFile As New ProjectFile(Me, "Main.module", ProjectTypes.Gambas)
  '
  ' Me.RootFolder = User.Home &/ "Documents/Gambas/MyFirstApp"
  ' Me.ProjectFiles.Add(ProjectFile)
  ' Me.Type = ProjectTypes.GambasScript

End

Public Function GetFirstProjectFile() As ProjectFile

  Dim ProjectFile As ProjectFile

  For Each ProjectFile In Me.ProjectFiles
    Return ProjectFile
  Next

End

Public Sub Save()

  Dim ProjectFile As ProjectFile

  For Each ProjectFile In Me.ProjectFiles
    ProjectFile.Flush()
  Next

End

Public Sub Run()

  Dim Compiler As New String[]
  Dim ProjectFile As ProjectFile

  Me.Save()

  Select Case Me.Type
    Case ProjectTypes.VbCore
      Compiler.Add(PathSetttings.Terminal)
      Compiler.Add(PathSetttings.TerminalHold)
      Compiler.Add(PathSetttings.TerminalCommand)
      Compiler.Add("dotnet run -p " & RootFolder)
      Exec Compiler For Read As "Compiler"

    Case ProjectTypes.SwiftScriptOneFile
      Compiler.Add(PathSetttings.Terminal)
      Compiler.Add(PathSetttings.TerminalHold)
      Compiler.Add(PathSetttings.TerminalCommand)
      Compiler.Add(PathSetttings.SwiftPath &/ "swift " & Me.RootFolder &/ "main.swift")
      Exec Compiler For Read As "Compiler"

    Case ProjectTypes.SwiftScript

      If Exist(Me.RootFolder &/ Me.TargetFile) Then
        Try Kill Me.RootFolder &/ Me.TargetFile
      End If

      Compiler.Add(PathSetttings.SwiftPath &/ "swiftc")
      Compiler.Add("-g")
      For Each ProjectFile In Me.ProjectFiles
        Compiler.Add(ProjectFile.FullFileName)
      Next
      Compiler.Add("-o")
      Compiler.Add(RootFolder &/ Me.TargetFile)
      Exec Compiler Wait For Read As "Compiler"

      Compiler.Clear
      Compiler.Add(PathSetttings.Terminal)
      Compiler.Add(PathSetttings.TerminalHold)
      Compiler.Add(PathSetttings.TerminalCommand)
      Compiler.Add(RootFolder &/ Me.TargetFile)
      Exec Compiler For Read As "Compiler"

    Case ProjectTypes.SwiftPackage

      If Exist(Me.RootFolder &/ Me.TargetFile) Then
        Try Kill Me.RootFolder &/ Me.TargetFile
      End If

      Compiler.Add(PathSetttings.SwiftPath &/ "swift")
      Compiler.Add("build")
      Compiler.Add("--verbose")
      Compiler.Add("--package-path")
      Compiler.Add(Me.RootFolder)
      Exec Compiler Wait For Read As "Compiler"

      Compiler.Clear
      Compiler.Add(PathSetttings.Terminal)
      Compiler.Add(PathSetttings.TerminalHold)
      Compiler.Add(PathSetttings.TerminalCommand)
      Compiler.Add(RootFolder &/ Me.TargetFile)
      Exec Compiler For Read As "Compiler"

    Case ProjectTypes.GambasScript
      Compiler.Add(PathSetttings.Terminal)
      Compiler.Add(PathSetttings.TerminalHold)
      Compiler.Add(PathSetttings.TerminalCommand)
      Compiler.Add("gbs3 " & Me.RootFolder &/ "Main.module")
      Exec Compiler For Read As "Compiler"

    Case Else
      Message.Error("No Compiler Configured for Project Type")

  End Select

End

Public Sub Debug()

  Dim Compiler As New String[]
  Dim ProjectFile As ProjectFile

  Me.Save()

  Select Case Me.Type
    Case ProjectTypes.VbCore

      If Exist(Me.RootFolder &/ Me.TargetFile) Then
        Try Kill Me.RootFolder &/ Me.TargetFile
      End If

      Compiler.Add("dotnet")
      Compiler.Add("build")
      Compiler.Add("-c")
      Compiler.Add("Debug")
      Compiler.Add("-r")
      Compiler.Add("ubuntu.16.04-x64") '"linuxmint.18-x64")
      Compiler.Add(RootFolder)
      Exec Compiler Wait For Read As "Compiler"

      Me.Debugger = New DebuggerLLDB("lldb-3.6", Me.RootFolder &/ Me.TargetFile)
      Me.Debugger.LoadPlugIn("/usr/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/libsosplugin.so")
      Me.Debugger.RunCommand("breakpoint set coreclr`EEStartup")
      Me.Debugger.SetBreakPoints("Program.vb", [4])
      Me.Debugger.Refresh()
      Me.Debugger.Run()

    Case ProjectTypes.SwiftScript

      If Exist(Me.RootFolder &/ Me.TargetFile) Then
        Try Kill Me.RootFolder &/ Me.TargetFile
      End If

      Compiler.Add(PathSetttings.SwiftPath &/ "swiftc")
      Compiler.Add("-g")
      For Each ProjectFile In Me.ProjectFiles
        Compiler.Add(ProjectFile.FullFileName)
      Next
      Compiler.Add("-o")
      Compiler.Add(RootFolder &/ Me.TargetFile)
      Exec Compiler Wait For Read As "Compiler"

      Me.Debugger = New DebuggerLLDB(PathSetttings.SwiftPath &/ "lldb", Me.RootFolder &/ Me.TargetFile)
      Me.DebuggerObserver = New Observer(Me.Debugger, True) As "DebuggerObserver"

      For Each ProjectFile In Me.ProjectFiles
        Me.Debugger.SetBreakpoints(ProjectFile.FileName, ProjectFile.Breakpoints)
      Next

      Me.Debugger.Run()

    Case ProjectTypes.SwiftPackage

      If Exist(Me.RootFolder &/ Me.TargetFile) Then
        Try Kill Me.RootFolder &/ Me.TargetFile
      End If

      Compiler.Add(PathSetttings.SwiftPath &/ "swift")
      Compiler.Add("build")
      Compiler.Add("--verbose")
      Compiler.Add("--package-path")
      Compiler.Add(Me.RootFolder)
      Exec Compiler Wait For Read As "Compiler"

      Me.Debugger = New DebuggerLLDB(PathSetttings.SwiftPath &/ "lldb", Me.RootFolder &/ Me.TargetFile)
      Me.DebuggerObserver = New Observer(Me.Debugger, True) As "DebuggerObserver"

      For Each ProjectFile In Me.ProjectFiles
        Me.Debugger.SetBreakpoints(ProjectFile.FileName, ProjectFile.Breakpoints)
      Next

      Me.Debugger.Run()

    Case Else
      Message.Error("No Debugger Configured for Project Type")

  End Select

End

Public Sub UpdateBreakpoints()

  Dim ProjectFile As ProjectFile

  If Not IsNull(Me.Debugger) Then
    Me.Debugger.ClearBreakpoints()
    For Each ProjectFile In Me.ProjectFiles
      Me.Debugger.SetBreakpoints(ProjectFile.FileName, ProjectFile.Breakpoints)
    Next
  End If

End

Public Sub DebuggerObserver_StoppedAt(FileName As String, LineNumber As Integer)

  Dim ProjectFile As ProjectFile

  For Each ProjectFile In Me.ProjectFiles
    If ProjectFile.FileName = FileName Then
      Raise ShowFile(ProjectFile)
      ProjectFile.StoppedAt(LineNumber)
    Else
      ProjectFile.StoppedAt(0)
    End If
  Next

End

Public Sub DebuggerObserver_DisplayLine(Value As String)

  Raise DisplayLineOfText(Value)

End

Public Sub Compiler_Read()

  Dim Value As String

  Do While Not Eof(Last)
    Value = Last.ReadLine()
    Raise DisplayLineOfText(Value)
  Loop

Catch

End

Public Sub Compiler_Error(Value As String)

  Raise DisplayLineOfText("Error: " & Value)

End

Public Sub Display(Value As String)

  Raise DisplayLineOfText(Value)

End

Public Sub PopupCodeCompletion(_TextEditor As CodeEditor)

  Me.Save
  Raise CodeCompletionPopup(_TextEditor)

End

Public Sub PulldownCodeCompletion(InsertFirst As Boolean)

  Raise CodeCompletionPulldown(InsertFirst)

End

Public Function NavigateCodeCompletion(Down As Integer) As Boolean

  Dim Handled As Boolean

  Handled = Raise CodeCompletionNavigate(Down)

  Return Handled

End



